"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _momentJalaali = _interopRequireDefault(require("moment-jalaali"));

var _Selected = _interopRequireDefault(require("./components/Selected"));

var _UnSelected = _interopRequireDefault(require("./components/UnSelected"));

var _helper = require("./utils/helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const HorizontalDatepicker = ({
  mode,
  startDate,
  endDate,
  onSelectedDateChange,
  initialSelectedDate,
  selectedItemWidth = 170,
  unselectedItemWidth = 38,
  itemHeight = 38,
  itemRadius = 10,
  selectedItemTextStyle,
  unselectedItemTextStyle,
  selectedItemBackgroundColor,
  unselectedItemBackgroundColor,
  flatListContainerStyle
}) => {
  const [selectedDate, setSelectedDate] = (0, _react.useState)((0, _momentJalaali.default)(initialSelectedDate).format('YYYY-MM-DD')); // Ref used to handle scroll to specific index

  const listRef = /*#__PURE__*/(0, _react.createRef)(); // use modern month names in jalali mode

  if (mode === 'jalali') {
    _momentJalaali.default.loadPersian({
      dialect: 'persian-modern'
    });
  } // format to show date in jalali mode


  const jFormat = 'ddddØŒ jD jMMMM'; // format to show date in gregorian mode

  const grFormat = 'dddd, MMM D'; // get dates between startDate and endDate

  const results = (0, _helper.enumerateDaysBetweenDates)(startDate, endDate); // handle press on date item, set selectedDate and call onSelectedDateChange with Date constractor

  const onDateItemPress = (item, index) => {
    var _listRef$current;

    setSelectedDate(item);
    onSelectedDateChange(new Date(item));
    (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollToIndex({
      animated: true,
      index: index,
      viewPosition: 0.5
    });
  }; // render Date items here


  const renderItem = ({
    item,
    index
  }) => /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    onPress: () => onDateItemPress(item, index)
  }, selectedDate === item ? /*#__PURE__*/_react.default.createElement(_Selected.default, {
    text: (0, _momentJalaali.default)(item).locale(mode === 'jalali' ? 'fa' : 'en').format(mode === 'jalali' ? jFormat : grFormat),
    selectedItemWidth: selectedItemWidth,
    selectedItemTextStyle: selectedItemTextStyle,
    selectedItemBackgroundColor: selectedItemBackgroundColor,
    itemRadius: itemRadius,
    itemHeight: itemHeight
  }) : /*#__PURE__*/_react.default.createElement(_UnSelected.default, {
    text: (0, _momentJalaali.default)(item).locale(mode === 'jalali' ? 'fa' : 'en').format(mode === 'jalali' ? 'jD' : 'DD'),
    unselectedItemBackgroundColor: unselectedItemBackgroundColor,
    unselectedItemTextStyle: unselectedItemTextStyle,
    unselectedItemWidth: unselectedItemWidth,
    itemRadius: itemRadius,
    itemHeight: itemHeight
  }));

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.FlatList, {
    horizontal: true,
    showsHorizontalScrollIndicator: false,
    data: results,
    scrollEventThrottle: 16,
    keyExtractor: (date, index) => "".concat(date + index),
    contentContainerStyle: [styles.flatListStyle, flatListContainerStyle] // invert flatlist when mode is jalali
    ,
    initialScrollIndex: 0,
    inverted: mode === 'jalali',
    ref: listRef,
    renderItem: renderItem,
    getItemLayout: (_, index) => ({
      length: itemHeight,
      offset: unselectedItemWidth * (index + 1) + 40,
      index
    })
  }));
};

const styles = _reactNative.StyleSheet.create({
  flatListStyle: {
    backgroundColor: '#f5f5f5',
    height: 58,
    alignItems: 'center'
  }
});

var _default = HorizontalDatepicker;
exports.default = _default;
//# sourceMappingURL=index.js.map