{"version":3,"sources":["index.tsx"],"names":["HorizontalDatepicker","mode","startDate","endDate","onSelectedDateChange","initialSelectedDate","selectedItemWidth","unselectedItemWidth","itemHeight","itemRadius","selectedItemTextStyle","unselectedItemTextStyle","selectedItemBackgroundColor","unselectedItemBackgroundColor","flatListContainerStyle","selectedDate","setSelectedDate","format","listRef","moment","loadPersian","dialect","jFormat","grFormat","results","onDateItemPress","item","index","Date","current","scrollToIndex","animated","viewPosition","renderItem","locale","date","styles","flatListStyle","_","length","offset","StyleSheet","create","backgroundColor","height","alignItems"],"mappings":"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","sourcesContent":["import React, { createRef, useState } from 'react';\nimport {\n  TextStyle,\n  FlatList,\n  StyleSheet,\n  TouchableOpacity,\n  ViewStyle,\n} from 'react-native';\nimport moment, { Moment } from 'moment-jalaali';\nimport SelectedDate from './components/Selected';\nimport UnSelectedDate from './components/UnSelected';\nimport { enumerateDaysBetweenDates } from './utils/helper';\n\ninterface Props {\n  mode: 'gregorian' | 'jalali';\n  startDate: Date | Moment;\n  endDate: Date | Moment;\n  onSelectedDateChange: (date: Date) => void;\n  initialSelectedDate?: Date;\n  selectedItemWidth?: number;\n  unselectedItemWidth?: number;\n  itemHeight?: number;\n  itemRadius?: number;\n  selectedItemTextStyle?: TextStyle;\n  unselectedItemTextStyle?: TextStyle;\n  selectedItemBackgroundColor?: string;\n  unselectedItemBackgroundColor?: string;\n  flatListContainerStyle?: ViewStyle;\n}\nconst HorizontalDatepicker: React.FC<Props> = ({\n  mode,\n  startDate,\n  endDate,\n  onSelectedDateChange,\n  initialSelectedDate,\n  selectedItemWidth = 170,\n  unselectedItemWidth = 38,\n  itemHeight = 38,\n  itemRadius = 10,\n  selectedItemTextStyle,\n  unselectedItemTextStyle,\n  selectedItemBackgroundColor,\n  unselectedItemBackgroundColor,\n  flatListContainerStyle,\n}) => {\n  const [selectedDate, setSelectedDate] = useState<string>(\n    moment(initialSelectedDate).format('YYYY-MM-DD')\n  );\n  // Ref used to handle scroll to specific index\n  const listRef = createRef<FlatList<any>>();\n  // use modern month names in jalali mode\n  if (mode === 'jalali') {\n    moment.loadPersian({\n      dialect: 'persian-modern',\n    });\n  }\n  // format to show date in jalali mode\n  const jFormat = 'ddddØŒ jD jMMMM';\n  // format to show date in gregorian mode\n  const grFormat = 'dddd, MMM D';\n  // get dates between startDate and endDate\n  const results = enumerateDaysBetweenDates(startDate, endDate);\n  // handle press on date item, set selectedDate and call onSelectedDateChange with Date constractor\n  const onDateItemPress = (item: string, index: number) => {\n    setSelectedDate(item);\n    onSelectedDateChange(new Date(item));\n    listRef.current?.scrollToIndex({\n      animated: true,\n      index: index,\n      viewPosition: 0.5,\n    });\n  };\n  // render Date items here\n  const renderItem = ({ item, index }: { item: string; index: number }) => (\n    <TouchableOpacity onPress={() => onDateItemPress(item, index)}>\n      {selectedDate === item ? (\n        <SelectedDate\n          text={moment(item)\n            .locale(mode === 'jalali' ? 'fa' : 'en')\n            .format(mode === 'jalali' ? jFormat : grFormat)}\n          selectedItemWidth={selectedItemWidth}\n          selectedItemTextStyle={selectedItemTextStyle}\n          selectedItemBackgroundColor={selectedItemBackgroundColor}\n          itemRadius={itemRadius}\n          itemHeight={itemHeight}\n        />\n      ) : (\n        <UnSelectedDate\n          text={moment(item)\n            .locale(mode === 'jalali' ? 'fa' : 'en')\n            .format(mode === 'jalali' ? 'jD' : 'DD')}\n          unselectedItemBackgroundColor={unselectedItemBackgroundColor}\n          unselectedItemTextStyle={unselectedItemTextStyle}\n          unselectedItemWidth={unselectedItemWidth}\n          itemRadius={itemRadius}\n          itemHeight={itemHeight}\n        />\n      )}\n    </TouchableOpacity>\n  );\n  return (\n    <>\n      <FlatList\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        data={results}\n        scrollEventThrottle={16}\n        keyExtractor={(date, index) => `${date + index}`}\n        contentContainerStyle={[styles.flatListStyle, flatListContainerStyle]}\n        // invert flatlist when mode is jalali\n        initialScrollIndex={0}\n        inverted={mode === 'jalali'}\n        ref={listRef}\n        renderItem={renderItem}\n        getItemLayout={(_, index) => ({\n          length: itemHeight,\n          offset: unselectedItemWidth * (index + 1) + 40,\n          index,\n        })}\n      />\n    </>\n  );\n};\nconst styles = StyleSheet.create({\n  flatListStyle: {\n    backgroundColor: '#f5f5f5',\n    height: 58,\n    alignItems: 'center',\n  },\n});\n\nexport default HorizontalDatepicker;\n"]}